name: GitHub Actions Auto Builder CI
env:
   ARCH: arm

on:
  push:
  schedule:
    - cron: '0 6 * * *'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - id: new_version_ts
        name: Early exit if no new version
        run: export RELEASE_VERSION_TS=$(curl --silent "https://api.github.com/repos/tailscale/tailscale/tags" | jq -r '.[0].name'); echo "RELEASE_VERSION_TS=$RELEASE_VERSION_TS" >> $GITHUB_ENV

      - id: new_version_tpi
        name: Early exit if no new version
        run: export RELEASE_VERSION_TPI=$(curl --silent "https://api.github.com/repos/wenyi0421/turing-pi/tags" | jq -r '.[0].name' | awk -F'v' '{print $2}'); echo "RELEASE_VERSION_TPI=$RELEASE_VERSION_TPI" >> $GITHUB_ENV

      - run: export RELEASE_VERSION_CTP_ASUSTOR_TS=$(curl --silent "https://api.github.com/repos/charlieporth1/asustor-tailscale/tags" | jq -r '.[0].name'); echo "RELEASE_VERSION_CTP_ASUSTOR_TS=$RELEASE_VERSION_CTP_ASUSTOR_TS" >> $GITHUB_ENV

      - run: export RELEASE_VERSION="tpi_v${{ env.RELEASE_VERSION_TPI }}+ts_v1$${{ env.RELEASE_VERSION_TS }}"; echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

      - run: test "$RELEASE_VERSION_CTP_ASUSTOR_TS" = "$RELEASE_VERSION" && exit 0 || exit 0
      - id: no_new_version
        if: failure()
        run: exit 0

      - id: no_new_version_alt
        if: steps.new_version.conclusion == 'failure'
        run: exit 0

      - id: checkout
        uses: actions/checkout@v3
        name: Auto Builder
#        if: steps.new_version.conclusion == 'success'      

      - id: rm_tgz
        run: rm -rf tailscale_*

      - run: rm -rf turing-pi/
      - run: git clone https://github.com/wenyi0421/turing-pi
      - run: bash -c "rm -rf turing-pi/.git; exit 0"

      - run: bash -c "cp -rf turing-pi/* .; exit 0"
      - run: bash -c "cp -rf turing-pi/.* .; exit 0"

#      - run: git pull -ff; exit 0

      - id: install_reqs
        run: sudo apt-get -y install build-essential subversion git-core libncurses5-dev zlib1g-dev gawk flex quilt libssl-dev xsltproc libxml-parser-perl mercurial bzr ecj cvs unzip lib32z1 lib32z1-dev lib32stdc++6 libstdc++6 libncurses-dev u-boot-tools mkbootimg

      - id: add_ts
        run: chmod +x ./ctp-scripts/*.sh
      - run: ARCH=arm ./ctp-scripts/build.sh


      - id: build
        run: cd buildroot; make BR2_EXTERNAL="../br2t113pro"  100ask_t113-pro_spinand_core_defconfig; make cjson-rebuild; make V=1

      - id: update_config
        run: cp bmc4tpi/config/sun8iw20p1* buildroot/output/build/linux-5112fdd843715f1615703ca5ce2a06c1abe5f9ee/arch/arm/boot/dts/ 
      - run: cp bmc4tpi/config/kernelconfig buildroot/output/build/linux-5112fdd843715f1615703ca5ce2a06c1abe5f9ee/.config
      - run: cp bmc4tpi/config/swupdateconfig buildroot/output/build/swupdate-2021.11/.config
      - run: cp bmc4tpi/swupdate/sw-description buildroot/output/images/
      - run: cp bmc4tpi/swupdate/genSWU.sh buildroot/output/images/
      - run: cp bmc4tpi/swupdate/env0.fex buildroot/output/images/
      - run: cp bmc4tpi/swupdate/env1.fex buildroot/output/images/
      - run: cp mkfw.sh buildroot/output/images/

      - id: rebuild
        run: cd buildroot; make linux-rebuild; make swupdate-rebuild; make V=1

      - run: ls -R buildroot/output/
      - run: cd buildroot/output/images/; ./genSWU.sh ${{ env.RELEASE_VERSION }}
      - run: cd buildroot/output/images/; ./mkfw.sh ${{ env.RELEASE_VERSION_TPI }}

      - run: ls -R buildroot/output/
      - run: cp -rf buildroot/output/images/*.swu .
      - run: cp -rf buildroot/output/images/*.swu .
      - run: rm -rf buildroot/



      - id: commit
        if: steps.new_version.conclusion == 'success'      
        run: sudo ls -R
      - run: sudo git config user.name github-actions
      - run: sudo git config user.email github-actions@github.com
      - run: sudo git add .
      - run: sudo git commit -m "Automatic Version Build from GitHub Action at `date` ${{ env.RELEASE_VERSION }}"
      - run: sudo git tag -a ${{ env.RELEASE_VERSION }} -m "Automatic tag ${{ env.RELEASE_VERSION }}"
      - run: sudo git push origin ${{ env.RELEASE_VERSION }}
      - run: sudo git push origin HEAD:master

      - id: upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.RELEASE_VERSION }}.swu
          path: buildroot/output/images/${{ env.RELEASE_VERSION }}.swu

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.RELEASE_VERSION }}.img
          path: buildroot/output/images/${{ env.RELEASE_VERSION_TPI }}.img

      - id: release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ env.RELEASE_VERSION }}
          prerelease: true
          title: "Automatic Release ${{ env.RELEASE_VERSION }}"
          files: |
            LICENSE.txt
            buildroot/output/images/*.img
            buildroot/output/images/*.swu
            *.img
            *.swu

